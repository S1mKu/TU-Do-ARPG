#!/usr/bin/env python
PACKAGE = "artus_imu_publisher"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
### ==== Sensor description ==== ###
gen.add("imu_sensor_name", str_t, 0, "Name of specific used Sensor", "MPU9250")
gen.add("serial_port", str_t, 0, "Name of specific Serial-Port connected with imu-sensor", "/dev/ttyACM1")

### ==== Calibration description ==== ###
### ~~~~ acceleration Offset ~~~~ ###
gen.add("accOffset_x", double_t, 0, "Acceleration Offset on x axis", -2, 0, 2)
gen.add("accOffset_y", double_t, 0, "Acceleration Offset on y axis", -2, 0, 2)
gen.add("accOffset_z", double_t, 0, "Acceleration Offset on z axis", -2, 0, 2)

### ~~~~ acceleration Gain ~~~~ ###
gen.add("accGain_00", double_t, 0, "Acceleration Gain Matrix Element [0][0]", -2, 0, 2)
gen.add("accGain_01", double_t, 0, "Acceleration Gain Matrix Element [0][1]", -2, 0, 2)
gen.add("accGain_02", double_t, 0, "Acceleration Gain Matrix Element [0][2]", -2, 0, 2)
gen.add("accGain_10", double_t, 0, "Acceleration Gain Matrix Element [1][0]", -2, 0, 2)
gen.add("accGain_11", double_t, 0, "Acceleration Gain Matrix Element [1][1]", -2, 0, 2)
gen.add("accGain_12", double_t, 0, "Acceleration Gain Matrix Element [1][2]", -2, 0, 2)
gen.add("accGain_20", double_t, 0, "Acceleration Gain Matrix Element [2][0]", -2, 0, 2)
gen.add("accGain_21", double_t, 0, "Acceleration Gain Matrix Element [2][1]", -2, 0, 2)
gen.add("accGain_22", double_t, 0, "Acceleration Gain Matrix Element [2][2]", -2, 0, 2)

### ~~~~ Gyro Offset ~~~~ ###
gen.add("gyroOffset_x", double_t, 0, "Gyro Offset on x axis", -250, 0, 250)
gen.add("gyroOffset_y", double_t, 0, "Gyro Offset on y axis", -250, 0, 250)
gen.add("gyroOffset_z", double_t, 0, "Gyro Offset on z axis", -250, 0, 250)

### ~~~~ Magnetometer Offset ~~~~ ###
gen.add("magOffset_x", double_t, 0, "Magnetometer Offset on x axis", -250, 0, 250)
gen.add("magOffset_y", double_t, 0, "Magnetometer Offset on y axis", -250, 0, 250)
gen.add("magOffset_z", double_t, 0, "Magnetometer Offset on z axis", -250, 0, 250)

### ~~~~ Magnetometer Gain ~~~~ ###
gen.add("magGain_00", double_t, 0, "Magnetometer Gain Matrix Element [0][0]", -5, 0, 5)
gen.add("magGain_01", double_t, 0, "Magnetometer Gain Matrix Element [0][1]", -5, 0, 5)
gen.add("magGain_02", double_t, 0, "Magnetometer Gain Matrix Element [0][2]", -5, 0, 5)
gen.add("magGain_10", double_t, 0, "Magnetometer Gain Matrix Element [1][0]", -5, 0, 5)
gen.add("magGain_11", double_t, 0, "Magnetometer Gain Matrix Element [1][1]", -5, 0, 5)
gen.add("magGain_12", double_t, 0, "Magnetometer Gain Matrix Element [1][2]", -5, 0, 5)
gen.add("magGain_20", double_t, 0, "Magnetometer Gain Matrix Element [2][0]", -5, 0, 5)
gen.add("magGain_21", double_t, 0, "Magnetometer Gain Matrix Element [2][1]", -5, 0, 5)
gen.add("magGain_22", double_t, 0, "Magnetometer Gain Matrix Element [2][2]", -5, 0, 5)

### ==== Covariance Matrix description ==== ###
### ~~~~ Orientation Covariance Matrix ~~~~ ###
gen.add("orientation_cov_00", double_t, 0, "Orientation Covariance Matrix Element [0][0]", -2, 0, 2)
gen.add("orientation_cov_01", double_t, 0, "Orientation Covariance Matrix Element [0][1]", -2, 0, 2)
gen.add("orientation_cov_02", double_t, 0, "Orientation Covariance Matrix Element [0][2]", -2, 0, 2)
gen.add("orientation_cov_10", double_t, 0, "Orientation Covariance Matrix Element [1][0]", -2, 0, 2)
gen.add("orientation_cov_11", double_t, 0, "Orientation Covariance Matrix Element [1][1]", -2, 0, 2)
gen.add("orientation_cov_12", double_t, 0, "Orientation Covariance Matrix Element [1][2]", -2, 0, 2)
gen.add("orientation_cov_20", double_t, 0, "Orientation Covariance Matrix Element [2][0]", -2, 0, 2)
gen.add("orientation_cov_21", double_t, 0, "Orientation Covariance Matrix Element [2][1]", -2, 0, 2)
gen.add("orientation_cov_22", double_t, 0, "Orientation Covariance Matrix Element [2][2]", -2, 0, 2)

### ~~~~ Angular Velocity Covariance Matrix ~~~~ ###
gen.add("angularVelocity_cov_00", double_t, 0, "Angular Velocity Covariance Matrix Element [0][0]", -2, 0, 2)
gen.add("angularVelocity_cov_01", double_t, 0, "Angular Velocity Covariance Matrix Element [0][1]", -2, 0, 2)
gen.add("angularVelocity_cov_02", double_t, 0, "Angular Velocity Covariance Matrix Element [0][2]", -2, 0, 2)
gen.add("angularVelocity_cov_10", double_t, 0, "Angular Velocity Covariance Matrix Element [1][0]", -2, 0, 2)
gen.add("angularVelocity_cov_11", double_t, 0, "Angular Velocity Covariance Matrix Element [1][1]", -2, 0, 2)
gen.add("angularVelocity_cov_12", double_t, 0, "Angular Velocity Covariance Matrix Element [1][2]", -2, 0, 2)
gen.add("angularVelocity_cov_20", double_t, 0, "Angular Velocity Covariance Matrix Element [2][0]", -2, 0, 2)
gen.add("angularVelocity_cov_21", double_t, 0, "Angular Velocity Covariance Matrix Element [2][1]", -2, 0, 2)
gen.add("angularVelocity_cov_22", double_t, 0, "Angular Velocity Covariance Matrix Element [2][2]", -2, 0, 2)

### ~~~~ Linear Acceleration Covariance Matrix ~~~~ ###
gen.add("linearAcc_cov_00", double_t, 0, "Linear Acceleration Covariance Matrix Element [0][0]", -2, 0, 2)
gen.add("linearAcc_cov_01", double_t, 0, "Linear Acceleration Covariance Matrix Element [0][1]", -2, 0, 2)
gen.add("linearAcc_cov_02", double_t, 0, "Linear Acceleration Covariance Matrix Element [0][2]", -2, 0, 2)
gen.add("linearAcc_cov_10", double_t, 0, "Linear Acceleration Covariance Matrix Element [1][0]", -2, 0, 2)
gen.add("linearAcc_cov_11", double_t, 0, "Linear Acceleration Covariance Matrix Element [1][1]", -2, 0, 2)
gen.add("linearAcc_cov_12", double_t, 0, "Linear Acceleration Covariance Matrix Element [1][2]", -2, 0, 2)
gen.add("linearAcc_cov_20", double_t, 0, "Linear Acceleration Covariance Matrix Element [2][0]", -2, 0, 2)
gen.add("linearAcc_cov_21", double_t, 0, "Linear Acceleration Covariance Matrix Element [2][1]", -2, 0, 2)
gen.add("linearAcc_cov_22", double_t, 0, "Linear Acceleration Covariance Matrix Element [2][2]", -2, 0, 2)

exit(gen.generate(PACKAGE, "artus_imu_publisher", "artus_imu_sensors"))
